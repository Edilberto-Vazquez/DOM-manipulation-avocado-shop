(()=>{"use strict";var e={209:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n extends HTMLElement{constructor(e,t,n){super(),this.attachShadow({mode:"open"}),this._image=e,this._name=t,this._price=n}get image(){return this._image}set image(e){this._image=e}get name(){return this._name}set name(e){this._name=e}get price(){return this._price}set price(e){this._price=e}formatPrice(e){return new window.Intl.NumberFormat("en-EN",{style:"currency",currency:"USD"}).format(e)}getStyles(){return"\n    <style>\n      * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n      }\n      :host {\n        width: 100%;\n        height: auto;\n        display: grid;\n      }\n      .product-item {\n        width: 100%;\n        max-height: 340px;\n        display: grid;\n        grid-auto-rows: 1fr;\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n        place-items: center;\n        row-gap: 14px;\n        border: 1px solid #568203;\n        border-radius: 10px;\n        cursor: pointer;\n        box-shadow: 3px 6px 6px 0px rgba(0,0,0,0.1);\n      }\n      .product-item:hover{\n        background: #568203;\n      }\n      .product-item__image {\n        max-width: 200px;\n        border-radius: 50%;\n        height: auto;\n      }\n      .product-description {\n        width: 100%;\n        height: auto;\n        text-align: center;\n      }\n      .product-description__name {\n        font-size: 2.4rem;\n      }\n      .product-description__price {\n        font-size: 2.4rem;\n        font-weight: 700;\n      }\n    </style>\n    "}getTemplete(){const e=document.createElement("template");return e.innerHTML=`\n      <div class="product-item">\n        <img class="product-item__image" src=${this.image} alt=${this.name}>\n        <div class="product-description">\n          <h2 class="product-description__name">${this.name}</h2>\n          <span class="product-description__price">${this.formatPrice(this.price)}</span>\n        </div>\n      </div>\n      ${this.getStyles()}\n    `,e}render(){this.shadowRoot?.append(this.getTemplete().content.cloneNode(!0))}connectedCallback(){this.render()}}customElements.define("product-card",n),t.default=n},820:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(411));window.addEventListener("load",i.default),window.addEventListener("hashchange",i.default)},411:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(175)),a=r(n(209));t.default=async()=>{const e="https://platzi-avo.vercel.app",t=await i.default(`${e}/api/avo`),n=document.createDocumentFragment(),r=document.querySelector("#product-list");await t.data.forEach((t=>{const r=new a.default(`${e}${t.image}`,t.name,t.price);n.append(r)})),r?.append(n)}},175:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=async e=>{try{const t=await fetch(e);return await t.json()}catch(e){console.log("Fetch error: ",e)}}}},t={};!function n(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={exports:{}};return e[r].call(a.exports,a,a.exports,n),a.exports}(820)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,